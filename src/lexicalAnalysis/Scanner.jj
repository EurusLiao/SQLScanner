/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */


options{
	JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    STATIC = true;
}

PARSER_BEGIN(Scanner)
package lexicalAnalysis;
import java.io.*;

public class Scanner{
  	
public static void main(String args[]){
        Scanner Tokeniser;
  
        if(args.length == 0){
            System.out.println("Reading from standard input!");
            Tokeniser = new Scanner(System.in);
		}
		else if(args.length == 1){
			try{
                Tokeniser = new Scanner(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e){
				System.err.println(args[0] + " was not found." );
				System.err.println(e);
				return;
			}
		}
		else{
			System.out.println("Use:\njava Scanner < inputFile");
			System.out.println("or java Scanner inputFile");
			return;
		}
		
        //Printing the tokens
        String str = "";
        String strAll = "";
        File file = new File("sql1.out");
        if(file.exists()) {
          System.out.println("output file exists");
          }
        else {
          try {
            file.createNewFile();
            }
          catch(IOException e){
            e.printStackTrace();
            }
          }
        //kind 1-18:keyword 19-24:data 25-28:literal 29-44:operator 45-49:escape character
		for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()) {
		  if(t.kind <= 17 && t.kind >= 1) {
              str = "line" + t.beginLine + "-" + t.endLine + " column" +
                t.beginColumn + "-" + t.endColumn + " is keyword(value = \"" + t + "\")\t";
            }
          else if(t.kind <= 23 && t.kind >=18) {
             str = "line" + t.beginLine + "-" + t.endLine + " column" +
                t.beginColumn + "-" + t.endColumn + " is datatype(value = \"" + t + "\")\t";
          }
          else if(t.kind <= 28 && t.kind >=24) {
              str = "line" + t.beginLine + "-" + t.endLine + " column" +
                t.beginColumn + "-" + t.endColumn + " is literal(value = \"" + t + "\")\t";
            }
          else if(t.kind <= 44 && t.kind >=29) {
              str = "line" + t.beginLine + "-" + t.endLine + " column" +
                t.beginColumn + "-" + t.endColumn + " is operator(value = \"" + t + "\")\t";
            }
          else{
            str = "escape character\t";
            }
          
            System.out.print(str+"\n");
            strAll += str;
		}
		
        //Printing End of File Token after All tokens have expire
        try {
              FileWriter writer = new FileWriter(file);
              writer.write(strAll);
              writer.close();
              }
            catch(IOException e) {
              e.printStackTrace();
              }
        System.out.print("<EOF>");
	}
}
PARSER_END(Scanner)

// ----------------------------------------------------------------------------
// TOKENS
// ----------------------------------------------------------------------------


TOKEN [ IGNORE_CASE ] : // KEYWORDS
{
  < SELECT : "SELECT" >
| < CREATE_TABLE : "CREATE TABLE" >
| < FROM : "FROM" >
| < JOIN : "JOIN" >
| < WHERE : "WHERE" >
| < ON : "ON" >
| < GROUP : "GROUP" >
| < BY : "BY" >
| < UNION : "UNION" >
| < AND : "AND" >
| < AS : "AS" >
| < ASC : "ASC" >
| < DESC : "DESC" >
| < OR : "OR" >
| < NOT : "NOT" >
| < TRUE : "TRUE" >
| < FALSE : "FALSE" >
}

TOKEN [ IGNORE_CASE ] : // DATA TYPES
{
  < INTEGER : "int" >
| < DATE : "date" >
| < FLOAT : "float" >
| < STRING : "string" >
| < BOOLEAN : "boolean" >
| < DOUBLE : "double" >
}

TOKEN : // LITERALS
{
  < NUMBER : ([ "0"-"9" ])+ >
| < NEGATIVE : (< MINUS >)? < NUMBER >>
| < EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < STRING_LITERAL : ([ "A"-"Z", "a"-"z" ])+ >
| < FLOATING_POINT_LITERAL :
    < NUMBER > < DOT > < NUMBER > (< EXPONENT >)?
  | ([ "+", "-" ])? < NUMBER > < DOT > < NUMBER > (< EXPONENT >)?
  | < DOT > < NUMBER > (< EXPONENT >)?
  | ([ "+", "-" ])? < NUMBER > < DOT > < EXPONENT >
  | < NUMBER > < EXPONENT >
  | < NUMBER > < DOT > < NUMBER > < EXPONENT >
  | < NUMBER > (< EXPONENT >)? >
}

TOKEN : // SEPARATORS AND OPERATORS
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < LESS : "<" >
| < LESSEQUAL : "<=" >
| < GREATER : ">" >
| < GREATEREQUAL : ">=" >
| < EQUAL : "=" >
| < NOTEQUAL : "!=" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < PLUS : "+" >
| < MINUS : "-" >
| < QUOTE : "'" >
| < OPEN : ("(") >
| < CLOSE : (")") >
}

TOKEN : // for out put
{
  < BLANK : " " >
| < NEW_LINE:"\n">
| < CARRIGE: "\r" >
| < TAB : "\t" >
| <  HuiCheLingHang : "\r\n" >
}