/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options{
	JAVA_UNICODE_ESCAPE = true;
    IGNORE_CASE = true;
    STATIC = true;
}

PARSER_BEGIN(Scanner)
package lexicalAnalysis;
import java.io.*;

public class Scanner{
  	
	public static void main(String args[]){
        Scanner Tokeniser;
  
        if(args.length == 0){
            System.out.println("Reading from standard input!");
            Tokeniser = new Scanner(System.in);
		}
		else if(args.length == 1){
			try{
                Tokeniser = new Scanner(new java.io.FileInputStream(args[0]));
			}
			catch(java.io.FileNotFoundException e){
				System.err.println(args[0] + " was not found." );
				System.err.println(e);
				return;
			}
		}
		else{
			System.out.println("Use:\njava Scanner < inputFile");
			System.out.println("or java Scanner inputFile");
			return;
		}
		
        //Printing the tokens
		for(Token t = getNextToken(); t.kind != EOF; t = getNextToken()){
            switch(t.kind){
                 case SELECT:{
                    System.out.print("<SELECT> ");
                    break;
                }
                 case CREATE_TABLE:{
                    System.out.print("<CREATE_TABLE> ");
                    break;
                }
                 case FROM:{
                    System.out.print("<FROM> ");
                    break;
                }
                 case JOIN:{
                    System.out.print("<JOIN> ");
                    break;
                }
                 case WHERE:{
                    System.out.print("<WHERE> ");
                    break;
                }
                 case ON:{
                    System.out.print("<ON> ");
                    break;
                }
                case GROUP:{
                    System.out.print("<GROUP> ");
                    break;
                }
                case BY:{
                    System.out.print("<BY> ");
                    break;
                }
                case UNION:{
                    System.out.print("<UNION> ");
                    break;
                }
                case AND:{
                    System.out.print("<AND> ");
                    break;
                }
                case AS:{
                    System.out.print("<AS> ");
                    break;
                }
                case ASC:{
                    System.out.print("<ASC> ");
                    break;
                }
                case DESC:{
                    System.out.print("<DESC> ");
                    break;
                }
                case OR:{
                    System.out.print("<OR> ");
                    break;
                }
                case NOT:{
                    System.out.print("<NOT> ");
                    break;
                }
                case TRUE:{
                    System.out.print("<TRUE> ");
                    break;
                }
                case FALSE:{
                    System.out.print("<FALSE> ");
                    break;
                }
                case FILEPATH:{
                    System.out.print("<FROM FILE> ");
                    break;
                }
                case STRING_LITERAL:{
                    System.out.print("<STRING_LITERAL> ");
                    break;
                }
                case STRING_SLASH:{
                    System.out.print("<STRING_SLASH> ");
                    break;
                }
                case STRING_QUOTE:{
                    System.out.print("<STRING_QUOTE> ");
                    break;
                }
                case FILE_NAME:{
                    System.out.print("<FILE_NAME> ");
                    break;
                }
                case INTEGER:{
                    System.out.print("<INTEGER> ");
                    break;
                }
                case DATE:{
                    System.out.print("<DATE> ");
                    break;
                }
                case FLOAT:{
                    System.out.print("<FLOAT> ");
                    break;
                }
                case STRING:{
                    System.out.print("<STRING> ");
                    break;
                }
                case BOOLEAN:{
                    System.out.print("<BOOLEAN> ");
                    break;
                }
                case DOUBLE:{
                    System.out.print("<DOUBLE> ");
                    break;
                }
                case NUMBER:{
                    System.out.print("<NUMBER> ");
                    break;
                }
                case NEGATIVE:{
                    System.out.print("<NEGATIVE> ");
                    break;
                }
                case EXPONENT:{
                    System.out.print("<EXPONENT> ");
                    break;
                }
                case FLOATING_POINT_LITERAL:{
                    System.out.print("<FLOATING_POINT_LITERAL> ");
                    break;
                }
                case SEMICOLON:{
                    System.out.print("<SEMICOLON> ");
                    break;
                }
                case COMMA:{
                    System.out.print("<COMMA> ");
                    break;
                }
                case DOT:{
                    System.out.print("<DOT> ");
                    break;
                }
                case LESS:{
                    System.out.print("<LESS> ");
                    break;
                }
                case LESSEQUAL:{
                    System.out.print("<LESSEQUAL> ");
                    break;
                }
                case GREATER:{
                    System.out.print("<GREATER> ");
                    break;
                }
                case GREATEREQUAL:{
                    System.out.print("<GREATEREQUAL> ");
                    break;
                }
                case EQUAL:{
                    System.out.print("<EQUAL> ");
                    break;
                }
                case NOTEQUAL:{
                    System.out.print("<NOTEQUAL> ");
                    break;
                }
                case MULTIPLY:{
                    System.out.print("<MULTIPLY> ");
                    break;
                }
                case DIVIDE:{
                    System.out.print("<DIVIDE> ");
                    break;
                }
                case PLUS:{
                    System.out.print("<PLUS> ");
                    break;
                }
                case MINUS:{
                    System.out.print("<MINUS> ");
                    break;
                }
                case QUOTE:{
                    System.out.print("<QUOTE> ");
                    break;
                }
                case OPEN:{
                    System.out.print("<OPEN> ");
                    break;
                }
                case CLOSE:{
                    System.out.print("<CLOSE> ");
                    break;
                }
                case COMMENT:{
                    System.out.print("<COMMENT> ");
                    break;
                }
             
                //Shouldn't ever be printed.
                default:{
                    System.out.print("<DEFAULT UNFOUND: Image:"+t.image+ " | Kind:" +t.kind +">");
                    break;
                }
            }
        }
        //Printing End of File Token after All tokens have expired
        System.out.print("<EOF>");
	}
}
PARSER_END(Scanner)

// ----------------------------------------------------------------------------
// TOKENS
// ----------------------------------------------------------------------------
SKIP :
{
  " "
| "\n"
| "\r"
| "\t"
| "\r\n"
}

TOKEN [ IGNORE_CASE ] : // KEYWORDS
{
  < SELECT : "SELECT" >
| < CREATE_TABLE : "CREATE TABLE" >
| < FROM : "FROM" >
| < JOIN : "JOIN" >
| < WHERE : "WHERE" >
| < ON : "ON" >
| < GROUP : "GROUP" >
| < BY : "BY" >
| < UNION : "UNION" >
| < AND : "AND" >
| < AS : "AS" >
| < ASC : "ASC" >
| < DESC : "DESC" >
| < OR : "OR" >
| < NOT : "NOT" >
| < TRUE : "TRUE" >
| < FALSE : "FALSE" >
| < FILEPATH : ("FROM FILE") >
| < STRING_LITERAL : ([ "A"-"Z", "a"-"z" ])+ >
| < STRING_SLASH : < STRING_LITERAL > ([ "\\", "\'" ])* >
| < STRING_QUOTE : < STRING_LITERAL > ("\'")* >
| < FILE_NAME : < STRING_LITERAL > (< DIVIDE > < STRING_LITERAL >)+ < DOT > < STRING_LITERAL >>
}

TOKEN [ IGNORE_CASE ] : // DATA TYPES
{
  < INTEGER : "int" >
| < DATE : "date" >
| < FLOAT : "float" >
| < STRING : "string" >
| < BOOLEAN : "boolean" >
| < DOUBLE : "double" >
}

TOKEN : // LITERALS
{
  < NUMBER : ([ "0"-"9" ])+ >
| < NEGATIVE : (< MINUS >)? < NUMBER >>
| < EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < FLOATING_POINT_LITERAL :
    < NUMBER > < DOT > < NUMBER > (< EXPONENT >)?
  | ([ "+", "-" ])? < NUMBER > < DOT > < NUMBER > (< EXPONENT >)?
  | < DOT > < NUMBER > (< EXPONENT >)?
  | ([ "+", "-" ])? < NUMBER > < DOT > < EXPONENT >
  | < NUMBER > < EXPONENT >
  | < NUMBER > < DOT > < NUMBER > < EXPONENT >
  | < NUMBER > (< EXPONENT >)? >
}

TOKEN : // SEPARATORS AND OPERATORS
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < LESS : "<" >
| < LESSEQUAL : "<=" >
| < GREATER : ">" >
| < GREATEREQUAL : ">=" >
| < EQUAL : "=" >
| < NOTEQUAL : "!=" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < PLUS : "+" >
| < MINUS : "-" >
| < QUOTE : "'" >
| < OPEN : ("(") >
| < CLOSE : (")") >
}

SPECIAL_TOKEN :
{
  < COMMENT : ("USING CSV")+ >
}